"""
Ход конём
Найти маршрут обхода конем шахматной доски, заданных размеров, из заданного начального положения коня.

Входные данные (файл input.txt):
 M, N - размеры шахматной доски.
 X, Y - начальные координаты расположения коня.

Выходные данные (файл output.txt):
Напечатать номер хода в каждой ячейки поля, если маршрут существует и "Маршрут не существует" в противном случае.
"""
file = open("input.txt").read().split()
m = int(file[0])  # кол-во столбиков
n = int(file[1])  # кол-во строчек
x0 = int(file[3]) - 1
y0 = int(file[2]) - 1
max_number = n * m                             #суммарное кол-во клеток доски
board = [[-1] * m for _ in range(n)]           #создание доски
visited = [[False] * m for _ in range(n)]      #создание доски для отслеживания посещённых полей
moves = [(1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1)]  #возможные ходы

"""Функция проверки координат
на соответствие границам доски"""
def check_moves(x: int, y: int) -> bool:
    return 0 <= x < m and 0 <= y < n

"""Функция проверяет состояние клетки: посещена или нет"""
def check_visit(x: int, y: int) -> bool:
    return visited[x][y]

"""Функция, возвращающая список
непосещённых клеток доски,
на которые конь может пойти
с данной позиции."""
def possible_move(x: int, y: int) -> list:
    moves_list = []
    for dx, dy in moves:
        x_new, y_new = x + dx, y + dy
        if check_moves(x_new, y_new):
            if not check_visit(x_new, y_new):
                moves_list.append((x_new, y_new))
    return moves_list

"""решение задачи с помощью правила Варнсдорфа 
(при обходе доски коню надо следовать в то поле, из которого существует минимальное число ходов)"""
def way(x, y, move_number) -> bool:        #функция возвращает True, если путь найден и False, если нет
    visited[x][y] = True                   #текущую клетку обозначаем как посещённую
    answer = False
    if move_number == max_number:          #если отмечаемый номер соответствует суммарному кол-ву клеток, то решение найдено(возв. True)
        board[x][y] = move_number
        answer = True
    else:
        move_list = possible_move(x, y)
        if len(move_list) != 0:
            """Получение количества полей, которые доступных с полей из текущего списка"""
            available_cells = [(len(possible_move(x_new, y_new)),(x_new, y_new)) for x_new, y_new in move_list]
            """Определение минимального кол-ва полей, доступных с клеток из списка"""
            min_moves = min(k[0] for k in available_cells)
            """Отбор полей списка,с которых можно пойти на минимальное число ещё не пройденных полей"""
            version = [j[1] for j in available_cells if j[0] == min_moves]
            """Вызываем функцию до тех пор, пока не решим задачу или не переберём все варианты"""
            for new_x, new_y in version:
                if way(new_x, new_y, move_number + 1):
                    board[x][y] = move_number
                    answer = True
                    break
    visited[x][y] = False
    return answer

if way(x0, y0, 1):
    for i in range(n - 1, - 1, - 1):
        print(*board[i])
else:
    print("Нет решений")


"""
Входные данные| Выходные данные |                
m n x y       |                 |   
______________|_________________|                             
5 5 2 2       |  25 10 13 4 19  |                             
              |  12 5 18 9 14   |                           
              |  17 24 11 20 3  |                            
              |  6 1 22 15 8    |                          
              |  23 16 7 2 21   |                             
_______________________________ |                          
6 6 3 5       |32 19 16 7 34 25 |                  
              |15 6 33 26 17 8  |                 
              |20 31 18 9 24 35 |                  
              |5 14 27 36 1 10  |                 
              |30 21 12 3 28 23 |                  
              |13 4 29 22 11 2  |                 
_______________________________ |                  
3 3 1 2       |Нет решений      |             
_______________________________ |                  
"""







